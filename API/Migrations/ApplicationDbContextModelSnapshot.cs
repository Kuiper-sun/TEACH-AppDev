// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Model.DailyLessonLogLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Materials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reflection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemplateTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("DailyLessonLogLayout");
                });

            modelBuilder.Entity("API.Model.DailyTimeRecordLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemplateTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOut")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalHours")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("DailyTimeRecordLayout");
                });

            modelBuilder.Entity("API.Model.LessonPlanLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Assessment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Assignment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objectives")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectMatter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemplateTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("LessonPlanLayout");
                });

            modelBuilder.Entity("API.Model.SchoolResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("SchoolResource");
                });

            modelBuilder.Entity("API.Model.SchoolTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("EstimatedHours")
                        .HasColumnType("decimal (18,2)");

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalFreeTime")
                        .HasColumnType("decimal (18,2)");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("SchoolTask");
                });

            modelBuilder.Entity("API.Model.TemplateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TemplateType");
                });

            modelBuilder.Entity("API.Model.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("API.Model.UserTemplateJoin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("UserTemplateJoin");
                });

            modelBuilder.Entity("API.Model.DailyLessonLogLayout", b =>
                {
                    b.HasOne("API.Model.TemplateType", "TemplateType")
                        .WithMany("DailyLessonLogLayouts")
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TemplateType");
                });

            modelBuilder.Entity("API.Model.DailyTimeRecordLayout", b =>
                {
                    b.HasOne("API.Model.TemplateType", "TemplateType")
                        .WithMany("DailyTimeRecordLayouts")
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TemplateType");
                });

            modelBuilder.Entity("API.Model.LessonPlanLayout", b =>
                {
                    b.HasOne("API.Model.TemplateType", "TemplateType")
                        .WithMany("LessonPlanLayouts")
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TemplateType");
                });

            modelBuilder.Entity("API.Model.SchoolResource", b =>
                {
                    b.HasOne("API.Model.UserAccount", "UserAccount")
                        .WithMany("SchoolResources")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("API.Model.SchoolTask", b =>
                {
                    b.HasOne("API.Model.UserAccount", "UserAccount")
                        .WithMany("SchoolTasks")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("API.Model.UserTemplateJoin", b =>
                {
                    b.HasOne("API.Model.TemplateType", "templateType")
                        .WithMany("UserTemplateJoins")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.UserAccount", "UserAccount")
                        .WithMany("UserTemplateJoins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");

                    b.Navigation("templateType");
                });

            modelBuilder.Entity("API.Model.TemplateType", b =>
                {
                    b.Navigation("DailyLessonLogLayouts");

                    b.Navigation("DailyTimeRecordLayouts");

                    b.Navigation("LessonPlanLayouts");

                    b.Navigation("UserTemplateJoins");
                });

            modelBuilder.Entity("API.Model.UserAccount", b =>
                {
                    b.Navigation("SchoolResources");

                    b.Navigation("SchoolTasks");

                    b.Navigation("UserTemplateJoins");
                });
#pragma warning restore 612, 618
        }
    }
}
